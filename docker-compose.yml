services:
  # ======================================
  # Conductor
  # ======================================
  # Conductor is a lightweight Alpine-based container that automates configuration tasks and initialization events
  # All scripts can be view from the repos conductorScripts folder
  #
  # .
  # └── conductorScripts/
  #   ├── /deployment
  #   └── /services
  #
  # - Services contains modular scripts for individual service setup tasks. Each file is named according to its purpose, with inline comments documenting the code.
  # - Deployments contains scripts that execute service scripts sequentially based on the deployment configuration. These also include custom post-deployment logs with essential next steps for the deployment scenario.
  #
  # For more info see the follow documentation: https://main--overturedev.netlify.app/docs/other-software/conductor/
  # --------------------------------------
  conductor:
    image: alpine/curl:8.8.0
    container_name: conductor
    ports:
      - '9204:9204'
    volumes:
      - ./persistentStorage/data-song-db:/song/db-folder-init
      - ./persistentStorage/data-keycloak-db:/keycloak/db-folder-init
      - ./configurationFiles/elasticsearchConfigs/demo_index_template.json:/usr/share/elasticsearch/config/demo_index_template.json
      - ./configurationFiles/elasticsearchConfigs/growth_index_template.json:/usr/share/elasticsearch/config/growth_index_template.json
      - ./scripts:/scripts
      - ./health:/health
    command: >
      sh -c '
        set -e
            echo "Running phase One platform deployment..."
            chmod +x scripts/deployments/phaseTwo.sh
            scripts/deployments/phaseTwo.sh
        exit 0
      '
    healthcheck:
      test: ['CMD', 'test', '-f', '/health/conductor_health']
      interval: 5s
      timeout: 40s
      retries: 100
      start_period: 30s
    networks:
      - conductor-network

  # ==================================================================================
  # OAuth (KeyCloak)
  # ==================================================================================

  # ======================================
  # Keycloak Database
  # --------------------------------------
  # Pre-populated with a system wide API key: 68fb42b4-f1ed-4e8c-beab-3724b99fe528, required for Songs SCORE_ACCESSTOKEN env variable
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/oauth/#setting-up-the-keycloak-database
  # --------------------------------------
  keycloak-db:
    depends_on:
      - conductor
    image: postgres:14
    platform: linux/amd64
    container_name: keycloak-db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: keycloakDb
    volumes:
      - ./persistentStorage/data-keycloak-db:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U admin -d keycloakDb']
      interval: 20s
      timeout: 10s
      retries: 10
      start_period: 20s
    networks:
      - conductor-network

  # ==========================
  # Keycloak
  # ==========================
  # Authorization and authentication service
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/oauth/#setting-up-keycloak
  # --------------------------------------
  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    container_name: keycloak
    platform: linux/amd64
    depends_on:
      keycloak-db:
        condition: service_healthy
    ports:
      - '8180:8080'
    environment:
      # Postgres Variables
      KC_DB: postgres
      KC_DB_USERNAME: admin
      KC_DB_PASSWORD: admin123
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloakDb
      # Keycloak Variables
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin123
      KC_HOSTNAME: localhost
      KC_HEALTH_ENABLED: true
    volumes:
      - ./configurationFiles/keycloakConfigs/keycloak-apikeys-1.0.1.jar:/opt/keycloak/providers/keycloak-apikeys.jar
      - ./configurationFiles/keycloakConfigs/myrealm-realm.json:/opt/keycloak/data/import/myrealm-realm.json
      - ./configurationFiles/keycloakConfigs/myrealm-users-0.json:/opt/keycloak/data/import/myrealm-users-0.json
    networks:
      - conductor-network
    command: >
      start-dev --import-realm --hostname-port=8180

  # ==================================================================================
  # File Management (Song, Score, Kafka, Minio)
  # ==================================================================================

  # ======================================
  # Kafka
  # ======================================
  # Messaging system for Song and Maestro, used to orchestrate asynchronous communication, job execution, queuing, and processing.
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/datamanagement/#running-kafka
  # --------------------------------------
  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka
    platform: linux/amd64
    ports:
      - '9092:9092'
      - '29092:29092'
    volumes:
      - ./scripts/services/kafkaSetup.sh:/scripts/kafkaSetup.sh
    environment:
      # Core Kafka Configuration
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://0.0.0.0:29092,CONTROLLER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      # Storage Configuration
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_LOG_RETENTION_HOURS: 168 # 7 days
      KAFKA_LOG_RETENTION_BYTES: -1 # Unlimited size
      # Topic Configuration
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: false
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      # Performance Tuning
      KAFKA_MESSAGE_MAX_BYTES: 5242880 # 5MB max message size
      KAFKA_REPLICA_FETCH_MAX_BYTES: 5242880
      # Logging Configuration
      KAFKA_LOG4J_LOGGERS: 'kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO'
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      # Cluster Configuration
      CLUSTER_ID: 'q1Sh-9_ISia_zwGINzRvyQ'
    command: >
      sh -c '
        echo "Setting up Kafka..."
        chmod +x /scripts/kafkaSetup.sh
        /scripts/kafkaSetup.sh &
        
        # Start Kafka broker
        /etc/confluent/docker/run
      '
    healthcheck:
      test:
        - 'CMD-SHELL'
        - >
          /bin/kafka-topics --bootstrap-server kafka:9092 --list
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - conductor-network

  # ======================================
  # Song Database
  # ======================================
  # Postgres database populated with 30 pre-published analyses (metadata files)
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/datamanagement/#running-song
  # --------------------------------------
  song-db:
    depends_on:
      - conductor
    image: postgres:11.1
    container_name: song-db
    platform: linux/amd64
    ports:
      - '5433:5432'
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: songDb
    volumes:
      - ./persistentStorage/data-song-db:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U admin -d songDb']
      interval: 20s
      timeout: 10s
      retries: 10
      start_period: 20s
    networks:
      - conductor-network

  # ======================================
  # Song
  # ======================================
  # Metadata management service with a customizable and automated submission validation system
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/datamanagement/#running-song
  # --------------------------------------
  song:
    image: ghcr.io/overture-stack/song-server:5.2.0
    container_name: song
    platform: linux/amd64
    depends_on:
      keycloak:
        condition: service_started
      kafka:
        condition: service_healthy
      song-db:
        condition: service_healthy
    ports:
      - '8080:8080'
    environment:
      # Spring Variables
      SPRING_PROFILES_ACTIVE: prod,secure,kafka
      # Swagger/OpenAPI Configuration
      SPRING_MVC_CORS_ENABLED: 'true'
      SPRING_MVC_CORS_ALLOWED-ORIGINS: '*'
      SPRING_MVC_CORS_ALLOWED-METHODS: 'GET,POST,PUT,DELETE,PATCH,OPTIONS'
      SPRING_MVC_CORS_ALLOWED-HEADERS: '*'
      SPRING_MVC_CORS_ALLOW-CREDENTIALS: 'true'
      # Flyway variables
      SPRING_FLYWAY_ENABLED: true
      # Song Variables
      ID_USELOCAL: true
      SCHEMAS_ENFORCELATEST: true
      # Score Variables
      SCORE_URL: http://score:8087
      SCORE_ACCESSTOKEN: 68fb42b4-f1ed-4e8c-beab-3724b99fe528
      # Keycloak Variables
      AUTH_SERVER_PROVIDER: keycloak
      AUTH_SERVER_CLIENTID: dms
      AUTH_SERVER_CLIENTSECRET: t016kqXfI648ORoIP5gepqCzqtsRjlcc
      AUTH_SERVER_TOKENNAME: apiKey
      AUTH_SERVER_KEYCLOAK_HOST: http://keycloak:8080
      AUTH_SERVER_KEYCLOAK_REALM: myrealm
      AUTH_SERVER_SCOPE_STUDY_PREFIX: STUDY.
      AUTH_SERVER_SCOPE_STUDY_SUFFIX: .WRITE
      AUTH_SERVER_SCOPE_SYSTEM: song.WRITE
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak:8080/realms/myrealm/protocol/openid-connect/certs
      AUTH_SERVER_INTROSPECTIONURI: http://keycloak:8080/realms/myrealm/apikey/check_api_key/
      # Postgres Variables
      SPRING_DATASOURCE_URL: jdbc:postgresql://song-db:5432/songDb?stringtype=unspecified
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin123
      # Kafka Variables
      SPRING_KAFKA_BOOTSTRAPSERVERS: kafka:9092
      SPRING_KAFKA_TEMPLATE_DEFAULTTOPIC: song-analysis
      # Swagger Variable
      SWAGGER_ALTERNATEURL: /swagger-api
    networks:
      - conductor-network

  # ======================================
  # Minio
  # ======================================
  # High-performance open-source object storage provider
  # Used here for local object storage found at persistentStorage/data-minio
  # data-minio contains 60 data files linked to the pre-populated analyses in the song-db. This folder is passed into the image on startup
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/datamanagement/#setting-up-object-storage
  # --------------------------------------
  minio:
    image: minio/minio:RELEASE.2018-05-11T00-29-24Z
    container_name: minio
    platform: linux/amd64
    ports:
      - 9000:9000
    environment:
      MINIO_ACCESS_KEY: admin
      MINIO_SECRET_KEY: admin123
    command: server /data
    volumes:
      - ./persistentStorage/data-minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - conductor-network

  # ======================================
  # Score
  # ======================================
  # File transfer microservice
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/datamanagement/#running-score
  # --------------------------------------
  score:
    image: ghcr.io/overture-stack/score-server:5.11.0
    container_name: score
    platform: linux/amd64
    depends_on:
      keycloak:
        condition: service_started
    ports:
      - '8087:8087'
    environment:
      # Spring Variables
      SPRING_PROFILES_ACTIVE: default,collaboratory,prod,secure,jwt
      SERVER_PORT: 8087
      # Song Variable
      METADATA_URL: http://song:8080
      # Score Variables
      SERVER_SSL_ENABLED: 'false'
      # Object Storage Variables
      S3_ENDPOINT: http://host.docker.internal:9000
      S3_ACCESSKEY: admin
      S3_SECRETKEY: admin123
      S3_SIGV4ENABLED: true
      S3_SECURED: false
      OBJECT_SENTINEL: heliograph
      BUCKET_NAME_OBJECT: object
      BUCKET_NAME_STATE: state
      UPLOAD_PARTSIZE: 1073741824
      UPLOAD_CONNECTION_TIMEOUT: 1200000
      # Keycloak Variables
      AUTH_SERVER_PROVIDER: keycloak
      AUTH_SERVER_CLIENTID: dms
      AUTH_SERVER_CLIENTSECRET: t016kqXfI648ORoIP5gepqCzqtsRjlcc
      AUTH_SERVER_TOKENNAME: apiKey
      AUTH_SERVER_KEYCLOAK_HOST: http://keycloak:8080
      AUTH_SERVER_KEYCLOAK_REALM: myrealm
      AUTH_SERVER_SCOPE_STUDY_PREFIX: STUDY.
      AUTH_SERVER_SCOPE_DOWNLOAD_SUFFIX: .READ
      AUTH_SERVER_SCOPE_DOWNLOAD_SYSTEM: score.READ
      AUTH_SERVER_SCOPE_UPLOAD_SYSTEM: score.WRITE
      AUTH_SERVER_SCOPE_UPLOAD_SUFFIX: .WRITE
      AUTH_SERVER_URL: http://keycloak:8080/realms/myrealm/apikey/check_api_key/
      AUTH_JWT_PUBLICKEYURL: http://keycloak:8080/oauth/token/public_key
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak:8080/realms/myrealm/protocol/openid-connect/certs
    networks:
      - conductor-network

  # ======================================
  # Elasticsearch
  # ======================================
  # Search and analytics engine used to help query massive datasets flexibly and efficiently.
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/dataportal/#setting-up-elasticsearch
  # --------------------------------------
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.1
    container_name: elasticsearch
    platform: linux/amd64
    ports:
      - '9200:9200'
    environment:
      PUID: 3381
      PGID: 100
      discovery.type: single-node
      cluster.name: workflow.elasticsearch
      ES_JAVA_OPTS: -Xms4g -Xmx4g
      ELASTIC_PASSWORD: myelasticpassword
      xpack.security.enabled: 'true'
      MANAGE_INDEX_TEMPLATES: 'true'
      NETWORK_HOST: http://localhost:9200
      bootstrap.memory_lock: 'true'
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          cpus: '6'
          memory: 16G
        reservations:
          cpus: '2'
          memory: 8G
    logging:
      driver: 'json-file'
      options:
        max-size: '50m'
        max-file: '10'
    healthcheck:
      test:
        'curl --silent --fail localhost:9200/_cluster/health?wait_for_status=yellow&timeout=50s ||
        exit 1'
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 25s
    networks:
      - conductor-network

  # ======================================
  # Maestro
  # ======================================
  # Indexing service that transforms metadata in Song into Elasticsearch documents
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/dataportal/#running-maestro
  # --------------------------------------
  maestro:
    image: ghcr.io/overture-stack/maestro:4.3.0
    container_name: maestro
    platform: linux/amd64
    depends_on:
      song:
        condition: service_started
      kafka:
        condition: service_started
      conductor:
        condition: service_healthy
    ports:
      - '11235:11235'
    environment:
      # Maestro Variables
      MAESTRO_FAILURELOG_ENABLED: true
      MAESTRO_FAILURELOG_DIR: app/logs/maestro
      MAESTRO_LOGGING_LEVEL_ROOT: INFO
      MAESTRO_NOTIFICATIONS_SLACK_ENABLED: false
      # Song Variables
      MAESTRO_REPOSITORIES_0_CODE: song.overture
      MAESTRO_REPOSITORIES_0_URL: http://song:8080
      MAESTRO_REPOSITORIES_0_NAME: Overture
      MAESTRO_REPOSITORIES_0_ORGANIZATION: OICR
      MAESTRO_REPOSITORIES_0_COUNTRY: CA
      # Elasticsearch Variables
      MAESTRO_ELASTICSEARCH_CLUSTER_NODES: http://elasticsearch:9200
      MAESTRO_ELASTICSEARCH_CLIENT_BASICAUTH_USER: elastic
      MAESTRO_ELASTICSEARCH_CLIENT_BASICAUTH_PASSWORD: myelasticpassword
      MAESTRO_ELASTICSEARCH_CLIENT_TRUSTSELFSIGNCERT: true
      MAESTRO_ELASTICSEARCH_INDEXES_ANALYSISCENTRIC_ENABLED: false
      MAESTRO_ELASTICSEARCH_INDEXES_FILECENTRIC_ENABLED: true
      MAESTRO_ELASTICSEARCH_INDEXES_FILECENTRIC_NAME: demo-index
      MAESTRO_ELASTICSEARCH_INDEXES_FILECENTRIC_ALIAS: file_centric
      MAESTRO_ELASTICSEARCH_CLIENT_BASICAUTH_ENABLED: true
      MANAGEMENT_HEALTH_ELASTICSEARCH_ENABLED: false
      # Spring Variables
      SPRING_MVC_ASYNC_REQUESTTIMEOUT: -1
      SPRINGDOC_SWAGGERUI_PATH: /swagger-api
      # Kafka Variables
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:9092
      SPRING_CLOUD_STREAM_BINDINGS_SONGINPUT_DESTINATION: song-analysis
    networks:
      - conductor-network

  # ======================================
  # Arranger-Server demo data
  # ======================================
  # Search API generation with compatible search UI components
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/dataportal/#running-arranger
  # --------------------------------------
  arranger-demo:
    image: ghcr.io/overture-stack/arranger-server:3.0.0-beta.36
    container_name: arranger-demo
    platform: linux/amd64
    depends_on:
      conductor:
        condition: service_healthy
    ports:
      - '5050:5050'
    volumes:
      - ./configurationFiles/arrangerConfigs/fileDataConfigs/base.json:/app/modules/server/configs/base.json
      - ./configurationFiles/arrangerConfigs/fileDataConfigs/extended.json:/app/modules/server/configs/extended.json
      - ./configurationFiles/arrangerConfigs/fileDataConfigs/facets.json:/app/modules/server/configs/facets.json
      - ./configurationFiles/arrangerConfigs/fileDataConfigs/matchbox.json:/app/modules/server/configs/matchbox.json
      - ./configurationFiles/arrangerConfigs/fileDataConfigs/table.json:/app/modules/server/configs/table.json
    environment:
      # Arranger Variables
      PORT: 5050
      ENABLE_LOGS: true
      # Elasticsearch Variables
      ES_HOST: http://elasticsearch:9200
      ES_USER: elastic
      ES_PASS: myelasticpassword
      ES_ARRANGER_SET_INDEX: demo_arranger_set
      DEBUG: true
    networks:
      - conductor-network

  # ======================================
  # Arranger-Server growths
  # ======================================
  # Search API generation with compatible search UI components
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/dataportal/#running-arranger
  # Check logs on arranger server for manifest columns
  # --------------------------------------
  arranger-growth:
    image: ghcr.io/overture-stack/arranger-server:3.0.0-beta.36
    container_name: arranger-growth
    platform: linux/amd64
    depends_on:
      conductor:
        condition: service_healthy
    ports:
      - "5051:5051"
    volumes:
     - ./configurationFiles/arrangerConfigs/growthConfigs/base.json:/app/modules/server/configs/base.json
     - ./configurationFiles/arrangerConfigs/growthConfigs/extended.json:/app/modules/server/configs/extended.json
     - ./configurationFiles/arrangerConfigs/growthConfigs/facets.json:/app/modules/server/configs/facets.json
     - ./configurationFiles/arrangerConfigs/growthConfigs/matchbox.json:/app/modules/server/configs/matchbox.json
     - ./configurationFiles/arrangerConfigs/growthConfigs/table.json:/app/modules/server/configs/table.json
    environment:
      # Arranger Variables
      PORT: 5051
      ENABLE_LOGS: false
      # Elasticsearch Variables
      ES_HOST: http://elasticsearch:9200
      ES_USER: elastic
      ES_PASS: myelasticpassword
      ES_ARRANGER_SET_INDEX: growth_arranger_set
      DEBUG: false
    networks:
      - conductor-network

  # ======================================
  # Stage run this locally
  # ======================================
  # The react-based, front end portal UI for Overture
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/dataportal/#setting-up-stage
  # --------------------------------------
  stage:
    image: localstageimage:2.0
    container_name: stage
    pull_policy: never
    platform: linux/arm64/v8
    depends_on:
      conductor:
        condition: service_healthy
    ports:
      - '3000:3000'
    environment:
      # Stage Variables
      NEXTAUTH_URL: http://localhost:3000/api/auth
      NEXT_PUBLIC_LAB_NAME: Prelude Portal
      NEXT_PUBLIC_ADMIN_EMAIL: example@example.com
      NEXT_PUBLIC_DEBUG: true
      NEXT_PUBLIC_SHOW_MOBILE_WARNING: true
      NEXT_PUBLIC_ENABLE_DOWNLOADS: true
      # Demo Arranger Variables
      NEXT_PUBLIC_ARRANGER_DEMO_API: http://arranger-demo:5050 
      NEXT_PUBLIC_ARRANGER_DEMO_DOCUMENT_TYPE: file
      NEXT_PUBLIC_ARRANGER_DEMO_INDEX: demo_centric
      NEXT_PUBLIC_ARRANGER_MANIFEST_COLUMNS: repositories.code, analysis.analysis_id, object_id, study_id
      # Growth Arranger Variables
      NEXT_PUBLIC_ARRANGER_GROWTH_API: http://arranger-growth:5051 
      NEXT_PUBLIC_ARRANGER_GROWTH_DOCUMENT_TYPE: file
      NEXT_PUBLIC_ARRANGER_GROWTH_INDEX: growth_centric
      # Song Variables (For Swagger Pages)
      NEXT_PUBLIC_SONG_API: http://localhost:8080
      NEXTAUTH_SECRET: 'your-secure-secret-here'
      # Keycloak Variables
      NEXT_PUBLIC_AUTH_PROVIDER: keycloak
      ACCESSTOKEN_ENCRYPTION_SECRET: super_secret
      SESSION_ENCRYPTION_SECRET: this_is_a_super_secret_secret
      NEXT_PUBLIC_KEYCLOAK_HOST: http://keycloak:8080
      NEXT_PUBLIC_KEYCLOAK_REALM: myrealm
      NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: webclient
      KEYCLOAK_CLIENT_SECRET: ikksyrYaKX07acf4hpGrpKWcUGaFkEdM
      NEXT_PUBLIC_KEYCLOAK_PERMISSION_AUDIENCE: dms
    networks:
      - conductor-network

volumes:
  elasticsearch-data:
    driver: local
    driver_opts:
      device: ./volumes/es-data
      o: bind
      type: none
  elasticsearch-logs:
    driver: local
    driver_opts:
      device: ./volumes/es-logs
      o: bind
      type: none

networks:
  conductor-network:
    driver: bridge


