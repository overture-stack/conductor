services:
  # ================================================================================== #
  # ================================================================================== #
  #                                                                                    #
  #                                    Prelude:                                        #
  #                                                                                    #
  # ================================================================================== #
  #  This compose breaks down data portal deployment into three phased steps such that #
  #  teams can systematically verify requirements and user workflows while minimizing  #
  #  technical overhead. The conductor service below manages all deployments using     #
  #  scripts to automate general setup and configuration.                              #
  # ================================================================================== #
  conductor:
    profiles: ['phaseOne', 'phaseTwo', 'phaseThree', 'stageDev', 'data', 'clean', 'platform']
    image: node:18-alpine
    container_name: conductor
    ports:
      - '9204:9204'
    volumes:
      - ./configs/elasticsearchConfigs/file_data_index_template.json:/usr/share/elasticsearch/config/file_data_index_template.json
      - ./configs/elasticsearchConfigs/tabular_data_index_template.json:/usr/share/elasticsearch/config/tabular_data_index_template.json
      - ./apps/csv-processor:/csv-processor
      - ./data:/data
      - ./scripts:/scripts
      - ./volumes/health:/health
    environment:
      PROFILE: ${PROFILE:-platform}
      # Arranger service script variables
      ARRANGER_FILE_URL: http://arranger-file:5050/graphql
      ARRANGER_TABULAR_URL: http://arranger-tabular:5051/graphql
      # Elasticsearch service script variables
      ES_URL: http://elasticsearch:9200
      ES_USER: elastic
      ES_PASS: myelasticpassword
      FILE_INDEX_NAME: file-index
      FILE_ES_TEMPLATE_FILE: /usr/share/elasticsearch/config/file_data_index_template.json
      FILE_ES_TEMPLATE_NAME: file_template
      FILE_ES_ALIAS_NAME: file_centric
      TABULAR_INDEX_NAME: tabular-index
      TABULAR_ES_TEMPLATE_FILE: /usr/share/elasticsearch/config/tabular_data_index_template.json
      TABULAR_ES_TEMPLATE_NAME: tabular_template
      TABULAR_ES_ALIAS_NAME: tabular_centric
      # Stage service script variable
      STAGE_URL: http://stage:3000
      # Data upload service script variable
      TABULAR_DATA_FILE: /data/tabularData.csv
    command: >
      sh -c '
        apk add --no-cache --quiet curl >/dev/null 2>&1
        set -e
          echo "Profile is set to: $PROFILE"
          case "$PROFILE" in
            phaseOne)
              echo "Running phaseOne deployment..."
              chmod +x scripts/deployments/phaseOne.sh
              scripts/deployments/phaseOne.sh
              ;;
            phaseTwo)
              echo "Running phaseTwo deployment..."
              chmod +x scripts/deployments/phaseTwo.sh
              scripts/deployments/phaseTwo.sh
              ;;
            phaseThree)
              echo "Running phaseThree deployment ..."
              chmod +x scripts/deployments/phaseThree.sh
              scripts/deployments/phaseThree.sh
              ;;
            stageDev)
              echo "Running Stage Dev deployment..."
              chmod +x scripts/deployments/stageDev.sh
              scripts/deployments/stageDev.sh
              ;;
            data)
              echo "Running mock data submission..."
              chmod +x scripts/services/phaseOne/submitMockData.sh
              scripts/services/phaseOne/submitMockData.sh
              ;;
            clean)
              echo "Removing data..."
              chmod +x scripts/services/phaseOne/clearElasticsearchData.sh
              scripts/services/phaseOne/clearElasticsearchData.sh
              ;;
            *)
              echo "No profile set..."
              ;;
          esac
          exit 0
      '
    healthcheck:
      test: ['CMD', 'test', '-f', '/health/conductor_health']
      interval: 5s
      timeout: 40s
      retries: 100
      start_period: 30s
    networks:
      - conductor-network

  # ================================================================================== #
  # ================================================================================== #
  #                                    PhaseOne:                                       #
  #                               Search & Discovery                                   #
  # ================================================================================== #
  # PhaseOne focuses on how you want your data displayed in the front-end portal.      #
  # Here you want to figure out how many data tables (Arrangers) you want and how you  #
  # want them configured. This is also a good time to do any theming of your portal.   #
  # through Stage.                                                                     #
  # ================================================================================== #
  elasticsearch:
    profiles: ['phaseOne', 'phaseTwo', 'phaseThree', 'stageDev', 'platform']
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.1
    container_name: elasticsearch
    platform: linux/amd64
    ports:
      - '9200:9200'
    environment:
      discovery.type: single-node
      cluster.name: workflow.elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx2048m
      ES_USER: elastic
      ELASTIC_PASSWORD: myelasticpassword
      xpack.security.enabled: 'true'
    logging:
      driver: 'json-file'
      options:
        max-size: '50m'
        max-file: '10'
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    healthcheck:
      test:
        'curl --silent --fail localhost:9200/_cluster/health?wait_for_status=yellow&timeout=50s ||
        exit 1'
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 25s
    networks:
      - conductor-network

  # ------------------------------------------------------------------------------------#
  # Arranger-Server for our file data                                                   #
  # ------------------------------------------------------------------------------------#
  # Search API generation with compatible search UI components                          #
  # Documentation Link: https://docs.overture.bio/docs/core-software/Arranger/overview  #
  # ------------------------------------------------------------------------------------#
  arranger-file:
    profiles: ['phaseOne', 'phaseTwo', 'phaseThree', 'stageDev', 'platform']
    image: ghcr.io/overture-stack/arranger-server:3.0.0-beta.36
    container_name: arranger-file
    platform: linux/amd64
    depends_on:
      conductor:
        condition: service_healthy
    ports:
      - '5050:5050'
    volumes:
      - ./configs/arrangerConfigs/fileDataConfigs/base.json:/app/modules/server/configs/base.json
      - ./configs/arrangerConfigs/fileDataConfigs/extended.json:/app/modules/server/configs/extended.json
      - ./configs/arrangerConfigs/fileDataConfigs/facets.json:/app/modules/server/configs/facets.json
      - ./configs/arrangerConfigs/fileDataConfigs/matchbox.json:/app/modules/server/configs/matchbox.json
      - ./configs/arrangerConfigs/fileDataConfigs/table.json:/app/modules/server/configs/table.json
    environment:
      # Elasticsearch Variables
      ES_HOST: http://elasticsearch:9200
      ES_USER: elastic
      ES_PASS: myelasticpassword
      ES_ARRANGER_SET_INDEX: file_arranger_set
      # Arranger Variables
      DEBUG: false
      ENABLE_LOGS: false
    networks:
      - conductor-network

  # ------------------------------------------------------------------------------------#
  # Arranger-Server for our tabular data                                                #
  # ------------------------------------------------------------------------------------#
  # Search API generation with compatible search UI components                          #
  # Documentation Link: https://docs.overture.bio/docs/core-software/Arranger/overview  #
  # ------------------------------------------------------------------------------------#
  arranger-tabular:
    profiles: ['phaseOne', 'phaseTwo', 'phaseThree', 'stageDev', 'platform']
    image: ghcr.io/overture-stack/arranger-server:3.0.0-beta.36
    container_name: arranger-tabular
    platform: linux/amd64
    depends_on:
      conductor:
        condition: service_healthy
    ports:
      - '5051:5051'
    volumes:
      - ./configs/arrangerConfigs/tabularDataConfigs/base.json:/app/modules/server/configs/base.json
      - ./configs/arrangerConfigs/tabularDataConfigs/extended.json:/app/modules/server/configs/extended.json
      - ./configs/arrangerConfigs/tabularDataConfigs/facets.json:/app/modules/server/configs/facets.json
      - ./configs/arrangerConfigs/tabularDataConfigs/matchbox.json:/app/modules/server/configs/matchbox.json
      - ./configs/arrangerConfigs/tabularDataConfigs/table.json:/app/modules/server/configs/table.json
    environment:
      # Elasticsearch Variables
      ES_HOST: http://elasticsearch:9200
      ES_USER: elastic
      ES_PASS: myelasticpassword
      ES_ARRANGER_SET_INDEX: tabular_arranger_set
      # Arranger Variables (Port required)
      PORT: 5051
      DEBUG: false
      ENABLE_LOGS: false
    networks:
      - conductor-network

  # ------------------------------------------------------------------------------------#
  # Stage                                                                    #
  # ------------------------------------------------------------------------------------#
  # The react-based, front end UI scaffolding for Overture                              #
  # Documentation Link: https://docs.overture.bio/docs/core-software/Stage/overview     #
  # ------------------------------------------------------------------------------------#
  stage:
    profiles: ['phaseOne', 'phaseTwo', 'phaseThree', 'platform']
    image: localstageimage:1.0
    container_name: stage
    pull_policy: never
    platform: linux/arm64/v8
    depends_on:
      conductor:
        condition: service_healthy
    ports:
      - '3000:3000'
    environment:
      # Stage Variables
      NEXTAUTH_URL: http://localhost:3000/api/auth
      NEXT_PUBLIC_LAB_NAME: Overture Prelude Portal
      NEXT_PUBLIC_ADMIN_EMAIL: example@example.com
      NEXT_PUBLIC_DEBUG: false
      NEXT_PUBLIC_SHOW_MOBILE_WARNING: true
      NEXT_PUBLIC_ENABLE_DOWNLOADS: true
      # File Arranger Variables
      NEXT_PUBLIC_ARRANGER_FILE_API: http://arranger-file:5050
      NEXT_PUBLIC_ARRANGER_FILE_DOCUMENT_TYPE: file
      NEXT_PUBLIC_ARRANGER_FILE_INDEX: file_centric
      NEXT_PUBLIC_ARRANGER_MANIFEST_COLUMNS:
        repositories.code, analysis.analysis_id, object_id, study_id, file.name, file.size,
        file.md5sum, file_access, analysis.experiment.acknowledgements.strategy, file.data_type,
        analysis.experiment.data.sequence_length
      # Tabular Arranger Variables
      NEXT_PUBLIC_ARRANGER_TABULAR_API: http://arranger-tabular:5051
      NEXT_PUBLIC_ARRANGER_TABULAR_DOCUMENT_TYPE: file
      NEXT_PUBLIC_ARRANGER_TABULAR_INDEX: tabular_centric
      # Song Variables (For Swagger Pages used in phaseThree)
      NEXT_PUBLIC_SONG_API: http://localhost:8080
      NEXTAUTH_SECRET: your-secure-secret-here
      # Homepage banner
      NEXT_PUBLIC_SYSTEM_ALERTS:
        '[{"level":"info","title":"Welcome to Prelude PhaseOne","message":"See the documentation tab
        for information on next steps including portal configuration and data
        submission.","dismissable":true,"id":"maintenance-2023"}]'
    volumes:
      - stage-data:/usr/src/public/static/dms_user_assets
    networks:
      - conductor-network

  # ================================================================================== #
  # ================================================================================== #
  #                                    PhaseTwo:                                       #
  #                          Tabular data storage & submission                         #
  # ================================================================================== #
  # Here we will focus on implementing our back-end tabular data management services   #
  # which will include the addition of Lyric, Lectern, LyricDb (Postgres) and a        #
  # LecternDb (MongoDb).                                                               #
  # ================================================================================== #

  # -----------------------------------------------------------------------------------#
  # Lectern                                                                            #
  # -----------------------------------------------------------------------------------#
  # Schema manager that validates and stores collections of data dictionaries.         #                                                               #
  # Documentation Link: https://docs.overture.bio/docs/under-development/lectern/      #
  # -----------------------------------------------------------------------------------#

  # -----------------------------------------------------------------------------------#
  # LecternDb                                                                          #
  # -----------------------------------------------------------------------------------#
  # Database used by Lectern to store its schemas.                                     #                                                               #
  # -----------------------------------------------------------------------------------#

  # -----------------------------------------------------------------------------------#
  # Lryic                                                                              #
  # -----------------------------------------------------------------------------------#
  # Submit, validate, and manage structured data according to predefined schemas.      #
  # Documentation Link: https://docs.overture.bio/docs/under-development/lyric/        #
  # -----------------------------------------------------------------------------------#

  # -----------------------------------------------------------------------------------#
  # LyricDb                                                                            #
  # -----------------------------------------------------------------------------------#
  # Database used by Lyric to store its tabular data.                                  #                                                               #
  # -----------------------------------------------------------------------------------#

  # -----------------------------------------------------------------------------------#
  # Maestro (Tabular Data)                                                             #
  # -----------------------------------------------------------------------------------#
  # Indexs tabular data into Elasticsearch on publication                              #
  # Documentation Link: https://docs.overture.bio/docs/core-software/Maestro/overview  #
  # -----------------------------------------------------------------------------------#

  # ================================================================================== #
  # ================================================================================== #
  #                                    PhaseThree:                                     #
  #                          File data storage & submission                            #
  # ================================================================================== #
  # Here we will focus on implementing our back-end file management services which     #
  # will include the addition of Song, Score, SongDb (Postgres) and an Object          #
  # Storage provider (Minio).                                                          #
  # ================================================================================== #

  # -----------------------------------------------------------------------------------#
  # Song                                                                               #
  # -----------------------------------------------------------------------------------#
  # Catalog and manage metadata associated to file data                                #                                                               #
  # Documentation Link: https://docs.overture.bio/docs/core-software/Song/overview     #
  # -----------------------------------------------------------------------------------#
  song:
    profiles: ['phaseThree', 'platform']
    image: ghcr.io/overture-stack/song-server:a81a8e48
    container_name: song
    platform: linux/amd64
    depends_on:
      song-db:
        condition: service_healthy
    ports:
      - '8080:8080'
    environment:
      # Spring Variables
      SPRING_PROFILES_ACTIVE: dev, noSecurityDev
      # Flyway variables
      SPRING_FLYWAY_ENABLED: true
      # Song Variables
      ID_USELOCAL: true
      SCHEMAS_ENFORCELATEST: true
      # Score Variables
      SCORE_URL: http://score:8087
      # Postgres Variables
      SPRING_DATASOURCE_URL: jdbc:postgresql://song-db:5432/songDb?stringtype=unspecified
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin123
      # Swagger Variable
      SWAGGER_ALTERNATEURL: /swagger-api
    networks:
      - conductor-network

  # -----------------------------------------------------------------------------------#
  # SongDb                                                                             #
  # -----------------------------------------------------------------------------------#
  # Database used by Lyric to store its tabular data.                                  #                                                               #
  # -----------------------------------------------------------------------------------#
  song-db:
    profiles: ['phaseThree', 'platform']
    depends_on:
      - conductor
    image: postgres:11.1
    container_name: song-db
    platform: linux/amd64
    ports:
      - '5433:5432'
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: songDb
    user: postgres:postgres
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U admin -d songDb']
      interval: 20s
      timeout: 10s
      retries: 10
      start_period: 20s
    volumes:
      - song-db-data:/var/lib/postgresql/data
    networks:
      - conductor-network

  # -----------------------------------------------------------------------------------#
  # Score                                                                              #
  # -----------------------------------------------------------------------------------#
  # Transfer file data to and from any S3 object storage.                              #
  # Documentation Link: https://docs.overture.bio/docs/core-software/Score/overview    #                                                            #
  # -----------------------------------------------------------------------------------#
  score:
    profiles: ['phaseThree', 'platform']
    image: ghcr.io/overture-stack/score-server:6c4a3a3c
    container_name: score
    platform: linux/amd64
    depends_on:
      minio:
        condition: service_healthy
    ports:
      - '8087:8087'
    environment:
      # Spring Variables
      SPRING_PROFILES_ACTIVE: noSecurityDev, s3
      SERVER_PORT: 8087
      # Song Variable
      METADATA_URL: http://song:8080
      # Score Variables
      SERVER_SSL_ENABLED: 'false'
      # Object Storage Variables
      S3_ENDPOINT: http://host.docker.internal:9000
      S3_ACCESSKEY: admin
      S3_SECRETKEY: admin123
      S3_SIGV4ENABLED: true
      S3_SECURED: false
      OBJECT_SENTINEL: heliograph
      BUCKET_NAME_OBJECT: object
      BUCKET_NAME_STATE: state
      UPLOAD_PARTSIZE: 1073741824
      UPLOAD_CONNECTION_TIMEOUT: 1200000
    networks:
      - conductor-network

  # -----------------------------------------------------------------------------------#
  # Minio                                                                              #
  # -----------------------------------------------------------------------------------#
  # A locally deployed open source S3-compatible object storage                        #
  # Documentation Link:                                                                #
  # http://docs.overture.bio/guides/deployment-guide/data-management-&-storage         #
  # -----------------------------------------------------------------------------------#
  minio:
    profiles: ['phaseThree', 'platform']
    image: minio/minio:RELEASE.2018-05-11T00-29-24Z
    container_name: minio
    platform: linux/amd64
    ports:
      - 9000:9000
    environment:
      MINIO_ACCESS_KEY: admin
      MINIO_SECRET_KEY: admin123
    command: server /data
    volumes:
      - ./volumes/data-minio:/data
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - conductor-network

  # -----------------------------------------------------------------------------------#
  # Maestro (File Data)                                                                #
  # -----------------------------------------------------------------------------------#
  # Indexs file data into Elasticsearch on publication                                 #
  # Documentation Link: https://docs.overture.bio/docs/core-software/Maestro/overview  #
  # -----------------------------------------------------------------------------------#
  maestro-file:
    profiles: ['phaseThree', 'platform']
    image: ghcr.io/overture-stack/maestro:4.3.0
    container_name: maestro-file
    platform: linux/amd64
    depends_on:
      song:
        condition: service_started
      conductor:
        condition: service_healthy
    ports:
      - '11235:11235'
    environment:
      # Maestro Variables
      MAESTRO_FAILURELOG_ENABLED: true
      MAESTRO_FAILURELOG_DIR: app/logs/maestro
      MAESTRO_LOGGING_LEVEL_ROOT: INFO
      MAESTRO_NOTIFICATIONS_SLACK_ENABLED: false
      # Song Variables
      MAESTRO_REPOSITORIES_0_CODE: song.overture
      MAESTRO_REPOSITORIES_0_URL: http://song:8080
      MAESTRO_REPOSITORIES_0_NAME: Overture
      MAESTRO_REPOSITORIES_0_ORGANIZATION: OICR
      MAESTRO_REPOSITORIES_0_COUNTRY: CA
      # Elasticsearch Variables
      MAESTRO_ELASTICSEARCH_CLUSTER_NODES: http://elasticsearch:9200
      MAESTRO_ELASTICSEARCH_CLIENT_BASICAUTH_USER: elastic
      MAESTRO_ELASTICSEARCH_CLIENT_BASICAUTH_PASSWORD: myelasticpassword
      MAESTRO_ELASTICSEARCH_CLIENT_TRUSTSELFSIGNCERT: true
      MAESTRO_ELASTICSEARCH_INDEXES_ANALYSISCENTRIC_ENABLED: false
      MAESTRO_ELASTICSEARCH_INDEXES_FILECENTRIC_ENABLED: true
      MAESTRO_ELASTICSEARCH_INDEXES_FILECENTRIC_NAME: file-index
      MAESTRO_ELASTICSEARCH_INDEXES_FILECENTRIC_ALIAS: file_centric
      MAESTRO_ELASTICSEARCH_CLIENT_BASICAUTH_ENABLED: true
      MANAGEMENT_HEALTH_ELASTICSEARCH_ENABLED: false
      # Spring Variables
      SPRING_MVC_ASYNC_REQUESTTIMEOUT: -1
      SPRINGDOC_SWAGGERUI_PATH: /swagger-api
      # Kafka Variables
      MAESTRO_DISABLEEVENTINDEXING: true
      # SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:9092
      # SPRING_CLOUD_STREAM_BINDINGS_SONGINPUT_DESTINATION: song-analysis
    volumes:
      - maestro-file-data:/app/app-data
    networks:
      - conductor-network

volumes:
  elasticsearch-data:
  stage-data:
  maestro-file-data:
  song-db-data:
networks:
  conductor-network:
    driver: bridge
