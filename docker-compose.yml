services:
  # ================================================================================== #
  #  This compose breaks down data portal deployment into three phased steps such that #
  #  teams can systematically verify requirements and user workflows while minimizing  #
  #  technical overhead. The conductor service below manages all deployments using     #
  #  scripts to automate general setup and configuration.                              #
  # ================================================================================== #
  conductor:
    profiles:
      [
        "phase1",
        "phase2",
        "phase3",
        "loadCSV",
        "lecternUpload",
        "lyricRegister",
        "lyricUpload",
        "SongSchemaUpload",
        "createSongStudy",
        "songDataUpload",
        "indexLyricData",
        "indexSongData",
        "stageDev",
        "default",
      ]
    image: node:22-alpine
    container_name: conductor
    ports:
      - "9204:9204"
    volumes:
      - ./apps/composer/:/composer
      - ./apps/conductor/:/conductor
      - ./data:/data
      - ./volumes/health:/health
      - ./configs/elasticsearchConfigs/correlation_index_template.json:/usr/share/elasticsearch/config/correlation_index_template.json
      - ./configs/elasticsearchConfigs/mutation_index_template.json:/usr/share/elasticsearch/config/mutation_index_template.json
      - ./configs/elasticsearchConfigs/mrna_index_template.json:/usr/share/elasticsearch/config/mrna_index_template.json
      - ./configs/elasticsearchConfigs/protein_index_template.json:/usr/share/elasticsearch/config/protein_index_template.json
    environment:
      PROFILE: ${PROFILE:-default}
      # Inputs
      DATA_FILES: /data/tabularData.csv
      INDEX_NAMES: tabular-index
      # Outputs
      SONG_SCHEMA: conductor/configs/songSchema
      LECTERN_DICTIONARY: conductor/configs/lecternDictionaries
      ES_MAPPINGS: conductor/configs/elasticsearchConfigs
      ARRANGER_CONFIGS: conductor/configs/arrangerConfigs
      # Elasticsearch service script variables
      ES_USER: elastic
      ES_PASS: myelasticpassword
      FILE_INDEX_NAME: file-index
      FILE_ES_TEMPLATE_FILE: conductor/configs/elasticsearchConfigs/file_data_index_template.json
      # File Metadata Mapping
      FILE_ES_TEMPLATE_NAME: file_template
      FILE_ES_ALIAS_NAME: file_centric
      TABULAR_INDEX_NAME: tabular-index
      # Tabular Mapping
      TABULAR_ES_TEMPLATE_FILE: conductor/configs/elasticsearchConfigs/tabular_data_index_template.json
      TABULAR_ES_TEMPLATE_NAME: tabular_template
      TABULAR_ES_ALIAS_NAME: tabular_centric
      # Service Ports
      STAGE_URL: http://stage:3000
      LECTERN_URL: http://lectern:3031
      ES_URL: http://elasticsearch:9200
      LYRIC_URL: http://lyric:3030
      SONG_URL: http://song:8080
      SCORE_URL: http://score:8087
      OBJECT_STORAGE_URL: http://minio:9000
      MAESTRO_URL: http://maestro:11235
      ARRANGER_FILE_DATA_URL: http://arranger-file:5050/graphql
      ARRANGER_TABULAR_DATA_URL: http://arranger-tabular:5051/graphql
      # Troubleshooting
      DEBUG: false
    command: >
      sh -c '
        set -e
          apk add --no-cache curl --quiet
          echo "Profile is set to: $PROFILE"
          case "$PROFILE" in
            "phase1")
              echo "Running phase1 deployment..."
              chmod +x conductor/scripts/deployments/phase1.sh
              conductor/scripts/deployments/phase1.sh
              ;;
            "phase2")
              echo "Running phase2 deployment..."
              chmod +x conductor/scripts/deployments/phase2.sh
              conductor/scripts/deployments/phase2.sh
              ;;
            "phase3")
              echo "Running phase3 deployment ..."
              chmod +x conductor/scripts/deployments/phase3.sh
              conductor/scripts/deployments/phase3.sh
              ;;
            "loadLecternDictionary")
              echo "Updating Lectern dictionary..."
              chmod +x conductor/scripts/lecternSchemaUpload.sh
              conductor/scripts/lecternSchemaUpload.sh
              ;;
            "registerLyricDictionary")
              echo "Registering Lyric with a Lectern dictionary..."
              chmod +x conductor/scripts/lyricRegisterDictionary.sh
              conductor/scripts/lyricRegisterDictionary.sh
              ;;
            "submitLyricData")
              echo "Uploading mock data to Lyric..."
              chmod +x conductor/scripts/lyricDataUpload.sh
              conductor/scripts/lyricDataUpload.sh
              ;;
            "indexLyricData")
              echo "Indexing tabular data..."
              chmod +x conductor/scripts/indexTabularData.sh
              conductor/scripts/indexTabularData.sh
              ;;
            "loadSongSchema")
              echo "Updating Song schema..."
              chmod +x conductor/scripts/songSchemaUpload.sh
              conductor/scripts/songSchemaUpload.sh
              ;;
            "createSongStudy")
              echo "Updating Song with a StudyId..."
              chmod +x conductor/scripts/songStudyCreation.sh
              conductor/scripts/songStudyCreation.sh
              ;;
            "submitSongData")
              echo "Loading Song data..."
              chmod +x conductor/scripts/songDataUpload.sh
              conductor/scripts/songDataUpload.sh
              ;;
            "indexSongData")
              echo "Indexing Song data..."
              chmod +x conductor/scripts/indexSongData.sh
              conductor/scripts/indexSongData.sh
              ;;
            "phaseOneSubmission")
              echo "Running tabular data submission..."
              chmod +x conductor/scripts/services/phase1/phaseOneSubmission.sh
              conductor/scripts/services/phase1/phaseOneSubmission.sh
              ;;
            "stageDev")
              echo "Running Stage Dev deployment..."
              chmod +x conductor/scripts/deployments/stageDev.sh
              conductor/scripts/deployments/stageDev.sh
              ;;
            "default")
              echo "Holla..."
              tail -f /dev/null
              ;;
            *)
              echo "Invalid profile specified."
              exit 1
              ;;
          esac
          exit 0
      '
    healthcheck:
      test: ["CMD", "test", "-f", "/health/conductor_health"]
      interval: 5s
      timeout: 40s
      retries: 100
      start_period: 30s
    networks:
      - conductor-network

  # ================================================================================== #
  # ================================================================================== #
  #                                    phase1:                                         #
  #                               Search & Discovery                                   #
  # ================================================================================== #
  # phase1 focuses on how you want your data displayed in the front-end portal.        #
  # Here you want to figure out how many data tables (Arrangers) you want and how you  #
  # want them configured. This is also a good time to do any theming of your portal.   #
  # through Stage.                                                                     #
  # ================================================================================== #

  # --------------------------------------------------------------------------------------#
  # Elasticsearch                                                                         #
  # --------------------------------------------------------------------------------------#
  # A search and analytics engine used to help query massive datasets.                    #
  # Documentation Link:                                                                   #
  # https://www.elastic.co/guide/en/elasticsearch/reference/7.17/elasticsearch-intro.html #
  # --------------------------------------------------------------------------------------#
  elasticsearch:
    profiles: ["phase1", "phase2", "phase3", "stageDev", "default"]
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.27
    container_name: elasticsearch
    platform: linux/amd64
    ports:
      - "9200:9200"
    environment:
      PUID: 3381
      PGID: 100
      discovery.type: single-node
      cluster.name: workflow.elasticsearch
      ES_JAVA_OPTS: -Xms8g -Xmx8g
      ELASTIC_PASSWORD: myelasticpassword
      xpack.security.enabled: "true"
      MANAGE_INDEX_TEMPLATES: "true"
      NETWORK_HOST: http://localhost:9200
      bootstrap.memory_lock: "true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          cpus: "6"
          memory: 16G
        reservations:
          cpus: "2"
          memory: 8G
    volumes:
      - elasticsearch-data:/usr/share/configs/elasticsearch/data
    healthcheck:
      test:
        "curl --silent --fail localhost:9200/_cluster/health?wait_for_status=yellow&timeout=50s ||
        exit 1"
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 25s
    networks:
      - conductor-network

  # ======================================
  # Arranger-Server Correlations
  # ======================================
  # Search API generation with compatible search UI components
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/dataportal/#running-arranger
  # --------------------------------------
  arranger-correlation:
    profiles: ["phase1", "phase2", "phase3", "stageDev", "default"]
    image: ghcr.io/overture-stack/arranger-server:3.0.0-beta.36
    container_name: arranger-correlation
    platform: linux/amd64
    depends_on:
      conductor:
        condition: service_healthy
    ports:
      - "5050:5050"
    volumes:
      - ./configs/arrangerConfigs/correlationConfigs/base.json:/app/modules/server/configs/base.json
      - ./configs/arrangerConfigs/correlationConfigs/extended.json:/app/modules/server/configs/extended.json
      - ./configs/arrangerConfigs/correlationConfigs/facets.json:/app/modules/server/configs/facets.json
      - ./configs/arrangerConfigs/correlationConfigs/matchbox.json:/app/modules/server/configs/matchbox.json
      - ./configs/arrangerConfigs/correlationConfigs/table.json:/app/modules/server/configs/table.json
    environment:
      # Arranger Variables
      PORT: 5050
      ENABLE_LOGS: false
      # Elasticsearch Variables
      ES_HOST: http://elasticsearch:9200
      ES_USER: elastic
      ES_PASS: myelasticpassword
      ES_ARRANGER_SET_INDEX: correlation_arranger_set
      DEBUG: true
    networks:
      - conductor-network

  # ======================================
  # Arranger-Server Mutations
  # ======================================
  # Search API generation with compatible search UI components
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/dataportal/#running-arranger
  # Check logs on arranger server for manifest columns
  # --------------------------------------
  arranger-mutation:
    profiles: ["phase1", "phase2", "phase3", "stageDev", "default"]
    image: ghcr.io/overture-stack/arranger-server:3.0.0-beta.36
    container_name: arranger-mutation
    platform: linux/amd64
    depends_on:
      conductor:
        condition: service_healthy
    ports:
      - "5051:5051"
    volumes:
      - ./configs/arrangerConfigs/mutationConfigs/base.json:/app/modules/server/configs/base.json
      - ./configs/arrangerConfigs/mutationConfigs/extended.json:/app/modules/server/configs/extended.json
      - ./configs/arrangerConfigs/mutationConfigs/facets.json:/app/modules/server/configs/facets.json
      - ./configs/arrangerConfigs/mutationConfigs/matchbox.json:/app/modules/server/configs/matchbox.json
      - ./configs/arrangerConfigs/mutationConfigs/table.json:/app/modules/server/configs/table.json
    environment:
      # Arranger Variables
      PORT: 5051
      ENABLE_LOGS: false
      # Elasticsearch Variables
      ES_HOST: http://elasticsearch:9200
      ES_USER: elastic
      ES_PASS: myelasticpassword
      ES_ARRANGER_SET_INDEX: mutation_arranger_set
      DEBUG: true
    networks:
      - conductor-network

  # ======================================
  # Arranger-Server MRNA
  # ======================================
  # Search API generation with compatible search UI components
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/dataportal/#running-arranger
  # --------------------------------------
  arranger-mrna:
    profiles: ["phase1", "phase2", "phase3", "stageDev", "default"]
    image: ghcr.io/overture-stack/arranger-server:3.0.0-beta.36
    container_name: arranger-mrna
    platform: linux/amd64
    depends_on:
      conductor:
        condition: service_healthy
    ports:
      - "5052:5052"
    volumes:
      - ./configs/arrangerConfigs/mrnaConfigs/base.json:/app/modules/server/configs/base.json
      - ./configs/arrangerConfigs/mrnaConfigs/extended.json:/app/modules/server/configs/extended.json
      - ./configs/arrangerConfigs/mrnaConfigs/facets.json:/app/modules/server/configs/facets.json
      - ./configs/arrangerConfigs/mrnaConfigs/matchbox.json:/app/modules/server/configs/matchbox.json
      - ./configs/arrangerConfigs/mrnaConfigs/table.json:/app/modules/server/configs/table.json
    environment:
      # Arranger Variables
      PORT: 5052
      ENABLE_LOGS: false
      # Elasticsearch Variables
      ES_HOST: http://elasticsearch:9200
      ES_USER: elastic
      ES_PASS: myelasticpassword
      ES_ARRANGER_SET_INDEX: mrna_arranger_set
      DEBUG: true
    networks:
      - conductor-network

  # ======================================
  # Arranger-Server protein
  # ======================================
  # Search API generation with compatible search UI components
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/dataportal/#running-arranger
  # --------------------------------------
  arranger-protein:
    profiles: ["phase1", "phase2", "phase3", "stageDev", "default"]
    image: ghcr.io/overture-stack/arranger-server:3.0.0-beta.36
    container_name: arranger-protein
    platform: linux/amd64
    depends_on:
      conductor:
        condition: service_healthy
    ports:
      - "5053:5053"
    volumes:
      - ./configs/arrangerConfigs/proteinConfigs/base.json:/app/modules/server/configs/base.json
      - ./configs/arrangerConfigs/proteinConfigs/extended.json:/app/modules/server/configs/extended.json
      - ./configs/arrangerConfigs/proteinConfigs/facets.json:/app/modules/server/configs/facets.json
      - ./configs/arrangerConfigs/proteinConfigs/matchbox.json:/app/modules/server/configs/matchbox.json
      - ./configs/arrangerConfigs/proteinConfigs/table.json:/app/modules/server/configs/table.json
    environment:
      # Arranger Variables
      PORT: 5053
      ENABLE_LOGS: false
      # Elasticsearch Variables
      ES_HOST: http://elasticsearch:9200
      ES_USER: elastic
      ES_PASS: myelasticpassword
      ES_ARRANGER_SET_INDEX: protein_arranger_set
      DEBUG: true
    networks:
      - conductor-network

  # ------------------------------------------------------------------------------------#
  # Stage                                                                               #
  # ------------------------------------------------------------------------------------#
  # The react-based, front end UI scaffolding for Overture                              #
  # Documentation Link: https://docs.overture.bio/docs/core-software/Stage/overview     #
  # ------------------------------------------------------------------------------------#
  stage:
    profiles: ["phase1", "phase2", "phase3", "default"]
    image: drugdiscoverystageimage:1.0
    container_name: stage
    pull_policy: never
    platform: linux/arm64/v8
    depends_on:
      conductor:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      # Stage Variables
      NEXTAUTH_URL: http://localhost:3000/api/auth
      NEXT_PUBLIC_LAB_NAME: Drug Discovery POC
      NEXT_PUBLIC_ADMIN_EMAIL: example@example.com
      NEXT_PUBLIC_DEBUG: true
      NEXT_PUBLIC_SHOW_MOBILE_WARNING: true
      NEXT_PUBLIC_ENABLE_DOWNLOADS: true
      # Correlation Arranger Variables
      NEXT_PUBLIC_ARRANGER_CORRELATION_API: http://localhost:5050/graphql # Updated inline with nginx reverse proxy
      NEXT_PUBLIC_ARRANGER_CORRELATION_DOCUMENT_TYPE: file
      NEXT_PUBLIC_ARRANGER_CORRELATION_INDEX: correlation_centric
      # Mutation Arranger Variables
      NEXT_PUBLIC_ARRANGER_MUTATION_API: http://localhost:5051/graphql # Updated inline with nginx reverse proxy
      NEXT_PUBLIC_ARRANGER_MUTATION_DOCUMENT_TYPE: file
      NEXT_PUBLIC_ARRANGER_MUTATION_INDEX: mutation_centric
      # MRNA Arranger Variables
      NEXT_PUBLIC_ARRANGER_MRNA_API: http://localhost:5052/graphql # Updated inline with nginx reverse proxy
      NEXT_PUBLIC_ARRANGER_MRNA_DOCUMENT_TYPE: file
      NEXT_PUBLIC_ARRANGER_MRNA_INDEX: mrna_centric
      # protein Arranger Variables
      NEXT_PUBLIC_ARRANGER_PROTEIN_API: http://localhost:5053/graphql # Updated inline with nginx reverse proxy
      NEXT_PUBLIC_ARRANGER_PROTEIN_DOCUMENT_TYPE: file
      NEXT_PUBLIC_ARRANGER_PROTEIN_INDEX: protein_centric
      # Using localhost for client-side requests
      NEXT_PUBLIC_SONG_API: http://song:8080
      NEXT_PUBLIC_LYRIC_API: http://lyric:3030
      NEXT_PUBLIC_LECTERN_API: http://lectern:3031
      NEXT_PUBLIC_SCORE_API: http://score:8087
      # Auth Variables
      NEXTAUTH_SECRET: your-secure-secret-here
      # System Alerts
      # NEXT_PUBLIC_SYSTEM_ALERTS: '[{"level":"info","title":"API Documentation Available","message":"Swagger documentation for Song, Lyric, Lectern, and Score APIs is now available in the Documentation section.","dismissable":true,"id":"api-docs-available"}]'
      # CORS Configuration
      NEXT_PUBLIC_CORS_ENABLED: "true"
      NEXT_PUBLIC_CORS_ALLOWED_ORIGINS: "*"
    volumes:
      - stage-data:/usr/src/public/static/dms_user_assets
    networks:
      - conductor-network

  # ================================================================================== #
  # ================================================================================== #
  #                                    phase2:                                         #
  #                          Tabular data storage & submission                         #
  # ================================================================================== #
  # Here we will focus on implementing our back-end tabular data management services   #
  # which will include the addition of Lyric, Lectern, LyricDb (Postgres) and a        #
  # LecternDb (MongoDb).                                                               #
  # ================================================================================== #

  # -----------------------------------------------------------------------------------#
  # Lectern                                                                            #
  # -----------------------------------------------------------------------------------#
  # Schema manager that validates and stores collections of data dictionaries.         #
  # Documentation Link: https://docs.overture.bio/docs/under-development/lectern/      #
  # -----------------------------------------------------------------------------------#
  lectern:
    profiles: ["phase2", "phase3", "default"]
    image: ghcr.io/overture-stack/lectern:2.0.0-beta.3
    container_name: lectern
    platform: linux/amd64
    depends_on:
      lectern-db:
        condition: service_healthy
    ports:
      - "3031:3031"
    environment:
      PORT: 3031
      OPENAPI_PATH: /api-docs
      MONGO_HOST: lectern-db
      MONGO_PORT: 27017
      MONGO_DB: lectern
      MONGO_USER: admin
      MONGO_PASS: admin123
      AUTH_ENABLED: false
      VAULT_ENABLED: false
    networks:
      - conductor-network

  # -----------------------------------------------------------------------------------#
  # LecternDb                                                                          #
  # -----------------------------------------------------------------------------------#
  # Database used by Lectern to store its schemas.                                     #
  # -----------------------------------------------------------------------------------#
  lectern-db:
    profiles: ["phase2", "phase3", "default"]
    image: bitnami/mongodb:4.0
    container_name: lectern-db
    platform: linux/amd64
    ports:
      - 27017:27017
    volumes:
      - lectern-db-data:/bitnami
    environment:
      MONGODB_USERNAME: admin
      MONGODB_PASSWORD: admin123
      MONGODB_DATABASE: lectern
      MONGODB_ROOT_PASSWORD: admin123
    healthcheck:
      test:
        [
          "CMD",
          "mongo",
          "--authenticationDatabase",
          "admin",
          "-u",
          "root",
          "-p",
          "admin123",
          "--eval",
          "db.adminCommand('ping')",
        ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - conductor-network

  # -----------------------------------------------------------------------------------#
  # Lryic                                                                              #
  # -----------------------------------------------------------------------------------#
  # Submit, validate, and manage structured data according to predefined schemas.      #
  # Documentation Link: https://docs.overture.bio/docs/under-development/lyric/        #
  # -----------------------------------------------------------------------------------#
  lyric:
    profiles: ["phase2", "phase3", "default"]
    image: ghcr.io/overture-stack/lyric:0.6.0
    container_name: lyric
    platform: linux/amd64
    depends_on:
      lyric-db:
        condition: service_healthy
      lectern:
        condition: service_started
    ports:
      - "3030:3030"
    environment:
      PORT: 3030
      DB_HOST: lyric-db
      DB_PORT: 5432
      DB_NAME: lyricDb
      DB_USER: admin
      DB_PASSWORD: admin123
      LECTERN_URL: http://lectern:3031
      LOG_LEVEL: debug
      AUDIT_ENABLED: false
      ID_USELOCAL: true
      UPLOAD_LIMIT: "100mb"
      PLURALIZE_SCHEMAS_ENABLED: false
    networks:
      - conductor-network

  # -----------------------------------------------------------------------------------#
  # LyricDb                                                                            #
  # -----------------------------------------------------------------------------------#
  # Database used by Lyric to store its tabular data.                                  #
  # -----------------------------------------------------------------------------------#
  lyric-db:
    profiles: ["phase2", phase3, "default"]
    image: postgres:15-alpine
    container_name: lyric-db
    platform: linux/amd64
    ports:
      - 5434:5432
    environment:
      POSTGRES_PASSWORD: admin123
      POSTGRES_USER: admin
      POSTGRES_DB: lyricDb
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d lyricDb"]
      interval: 20s
      timeout: 10s
      retries: 10
      start_period: 20s
    volumes:
      - lyric-db-data:/var/lib/postgresql/data
    networks:
      - conductor-network

  # -----------------------------------------------------------------------------------#
  # Maestro (Tabular Data)                                                             #
  # -----------------------------------------------------------------------------------#
  # Indexs tabular data into Elasticsearch on publication                              #
  # Documentation Link: https://docs.overture.bio/docs/core-software/Maestro/overview  #
  # Organization === study                                                             #
  # id === analysisId                                                                  #
  # -----------------------------------------------------------------------------------#
  maestro:
    profiles: ["phase2", phase3, "default"]
    image: ghcr.io/overture-stack/maestro:e868d03
    container_name: maestro
    platform: linux/amd64
    depends_on:
      lectern:
        condition: service_started
      conductor:
        condition: service_healthy
    ports:
      - "11235:11235"
    environment:
      # Maestro Base Variables
      MAESTRO_FAILURELOG_ENABLED: true
      MAESTRO_FAILURELOG_DIR: app/logs/maestro
      MAESTRO_LOGGING_LEVEL_ROOT: INFO
      MAESTRO_NOTIFICATIONS_SLACK_ENABLED: false
      MAESTRO_DISABLEEVENTINDEXING: true
      # Repository Configuration - Lyric
      MAESTRO_REPOSITORIES_0_BASE_URL: http://lyric:3030
      # in the old world we added these to each document in elasticsearch,
      MAESTRO_REPOSITORIES_0_CODE: lyric.overture
      MAESTRO_REPOSITORIES_0_NAME: Overture Lyric
      MAESTRO_REPOSITORIES_0_PAGINATION_SIZE: 50
      MAESTRO_REPOSITORIES_0_INDEX_NAME: tabular-index
      MAESTRO_REPOSITORIES_0_TYPE: LYRIC
      MAESTRO_REPOSITORIES_0_LYRIC_VALID_DATA_ONLY: true
      MAESTRO_REPOSITORIES_0_LYRIC_CATEGORY_ID: 1
      # Elasticsearch Settings (Required)
      MAESTRO_ELASTICSEARCH_NODES: http://elasticsearch:9200
      MAESTRO_ELASTICSEARCH_VERSION: 7
      MAESTRO_ELASTICSEARCH_CLIENT_BASICAUTH_ENABLED: true
      MAESTRO_ELASTICSEARCH_CLIENT_BASICAUTH_USER: elastic
      MAESTRO_ELASTICSEARCH_CLIENT_BASICAUTH_PASSWORD: myelasticpassword
      MAESTRO_ELASTICSEARCH_CLIENT_RETRY_MAX_ATTEMPTS: 3
      MAESTRO_ELASTICSEARCH_CLIENT_RETRY_WAIT_DURATION_MILLIS: 500
      MAESTRO_ELASTICSEARCH_CLIENT_DOCS_PER_BULK_REQ_MAX: 5000
      MAESTRO_ELASTICSEARCH_CLIENT_CONNECTION_TIMEOUT: 5000
      # Repository Configuration - Song
      MAESTRO_REPOSITORIES_1_BASE_URL: http://song:8080
      MAESTRO_REPOSITORIES_1_CODE: song.overture
      MAESTRO_REPOSITORIES_1_NAME: Overture Song
      MAESTRO_REPOSITORIES_1_PAGINATION_SIZE: 50
      MAESTRO_REPOSITORIES_1_INDEX_NAME: file-index
      MAESTRO_REPOSITORIES_1_TYPE: SONG
      MAESTRO_REPOSITORIES_1_SONG_INDEXABLE_STUDY_STATES: PUBLISHED
      MAESTRO_REPOSITORIES_1_SONG_ANALYSIS_CENTRIC_ENABLED: true
      MAESTRO_REPOSITORIES_1_SONG_ORGANIZATION: OICR
      MAESTRO_REPOSITORIES_1_SONG_COUNTRY: CA
    volumes:
      - maestro-data:/app/app-data
    networks:
      - conductor-network

  # ================================================================================== #
  # ================================================================================== #
  #                                    phase3:                                         #
  #                          File data storage & submission                            #
  # ================================================================================== #
  # Here we will focus on implementing our back-end file management services which     #
  # will include the addition of Song, Score, SongDb (Postgres) and an Object          #
  # Storage provider (Minio).                                                          #
  # ================================================================================== #

  # -----------------------------------------------------------------------------------#
  # Song                                                                               #
  # -----------------------------------------------------------------------------------#
  # Catalog and manage metadata associated to file data                                #
  # Documentation Link: https://docs.overture.bio/docs/core-software/Song/overview     #
  # -----------------------------------------------------------------------------------#
  song:
    profiles: ["phase3", "default"]
    image: ghcr.io/overture-stack/song-server:a81a8e48
    container_name: song
    platform: linux/amd64
    depends_on:
      song-db:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      # Spring Variables
      SPRING_PROFILES_ACTIVE: dev, noSecurityDev
      # Swagger/OpenAPI Configuration
      SPRING_MVC_CORS_ENABLED: "true"
      SPRING_MVC_CORS_ALLOWED-ORIGINS: "*"
      SPRING_MVC_CORS_ALLOWED-METHODS: "GET,POST,PUT,DELETE,PATCH,OPTIONS"
      SPRING_MVC_CORS_ALLOWED-HEADERS: "*"
      SPRING_MVC_CORS_ALLOW-CREDENTIALS: "true"
      # Flyway variables
      SPRING_FLYWAY_ENABLED: true
      # Song Variables
      ID_USELOCAL: true
      SCHEMAS_ENFORCELATEST: true
      # Score Variables
      SCORE_URL: http://score:8087
      # Postgres Variables
      SPRING_DATASOURCE_URL: jdbc:postgresql://song-db:5432/songDb?stringtype=unspecified
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin123
      # Swagger Variable
      SWAGGER_ALTERNATEURL: /swagger-api
    networks:
      - conductor-network

  # -----------------------------------------------------------------------------------#
  # SongDb                                                                             #
  # -----------------------------------------------------------------------------------#
  # Database used by Lyric to store its tabular data.                                  #
  # -----------------------------------------------------------------------------------#
  song-db:
    profiles: ["phase3", "default"]
    depends_on:
      - conductor
    image: postgres:11.1
    container_name: song-db
    platform: linux/amd64
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: songDb
    user: postgres:postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d songDb"]
      interval: 20s
      timeout: 10s
      retries: 10
      start_period: 20s
    volumes:
      - song-db-data:/var/lib/postgresql/data
    networks:
      - conductor-network

  # -----------------------------------------------------------------------------------#
  # Score                                                                              #
  # -----------------------------------------------------------------------------------#
  # Transfer file data to and from any S3 object storage.                              #
  # Documentation Link: https://docs.overture.bio/docs/core-software/Score/overview    #
  # -----------------------------------------------------------------------------------#
  score:
    profiles: ["phase3", "default"]
    image: ghcr.io/overture-stack/score-server:6c4a3a3c
    container_name: score
    platform: linux/amd64
    depends_on:
      minio:
        condition: service_healthy
    ports:
      - "8087:8087"
    environment:
      # Spring Variables
      SPRING_PROFILES_ACTIVE: noSecurityDev, s3
      SERVER_PORT: 8087
      # Song Variable
      METADATA_URL: http://song:8080
      # Score Variables
      SERVER_SSL_ENABLED: "false"
      # Object Storage Variables
      S3_ENDPOINT: http://minio:9000
      S3_PRESIGNEDURL_BASEURL: http://localhost:9000
      S3_ACCESSKEY: admin
      S3_SECRETKEY: admin123
      S3_SIGV4ENABLED: true
      S3_SECURED: false
      OBJECT_SENTINEL: heliograph
      BUCKET_NAME_OBJECT: object
      BUCKET_NAME_STATE: state
      UPLOAD_PARTSIZE: 1073741824
      UPLOAD_CONNECTION_TIMEOUT: 1200000
    networks:
      - conductor-network

  # -----------------------------------------------------------------------------------#
  # Minio                                                                              #
  # -----------------------------------------------------------------------------------#
  # A locally deployed open source S3-compatible object storage                        #
  # Documentation Link:                                                                #
  # http://docs.overture.bio/guides/deployment-guide/data-management-&-storage         #
  # -----------------------------------------------------------------------------------#
  minio:
    profiles: ["phase3", "default"]
    image: minio/minio:RELEASE.2018-05-11T00-29-24Z
    container_name: minio
    platform: linux/amd64
    ports:
      - 9000:9000
    environment:
      MINIO_ACCESS_KEY: admin
      MINIO_SECRET_KEY: admin123
    command: server /data
    volumes:
      - ./volumes/data-minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - conductor-network

  # ------------------------------------------------------------------------------------#
  # Arranger-Server for our file data                                                   #
  # ------------------------------------------------------------------------------------#
  # Search API generation with compatible search UI components                          #
  # Documentation Link: https://docs.overture.bio/docs/core-software/Arranger/overview  #
  # ------------------------------------------------------------------------------------#
  arranger-file:
    profiles: ["phase3", "stageDev", "default"]
    image: ghcr.io/overture-stack/arranger-server:3.0.0-beta.36
    container_name: arranger-file
    platform: linux/amd64
    depends_on:
      conductor:
        condition: service_healthy
    ports:
      - "5050:5050"
    volumes:
      - ./apps/conductor/configs/arrangerConfigs/fileDataConfigs:/app/modules/server/configs
    environment:
      # Elasticsearch Variables
      ES_HOST: http://elasticsearch:9200
      ES_USER: elastic
      ES_PASS: myelasticpassword
      ES_ARRANGER_SET_INDEX: file_arranger_set
      # Arranger Variables
      DEBUG: false
      ENABLE_LOGS: false
    networks:
      - conductor-network

volumes:
  elasticsearch-data:
  stage-data:
  maestro-data:
  song-db-data:
  lyric-db-data:
  lectern-db-data:
networks:
  conductor-network:
    driver: bridge
