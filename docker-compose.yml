services:
  # ======================================
  # Conductor
  # ======================================
  # Conductor is a lightweight Alpine-based container that automates configuration tasks and initialization events
  # All scripts can be view from the repos conductorScripts folder
  #
  # .
  # └── conductorScripts/
  #   ├── /deployment
  #   └── /services
  #
  # - Services contains modular scripts for individual service setup tasks. Each file is named according to its purpose, with inline comments documenting the code.
  # - Deployments contains scripts that execute service scripts sequentially based on the deployment configuration. These also include custom post-deployment logs with essential next steps for the deployment scenario.
  #
  # For more info see the follow documentation: https://main--overturedev.netlify.app/docs/other-software/conductor/
  # --------------------------------------
  conductor:
    profiles: ["platform"]
    image: alpine/curl:8.8.0
    container_name: conductor
    ports:
      - "9204:9204"
    volumes:
      - ./persistentStorage/data-song-db:/song/db-folder-init
      - ./configurationFiles/elasticsearchConfigs/composition_index_template.json:/usr/share/elasticsearch/config/composition_index_template.json
      - ./configurationFiles/elasticsearchConfigs/instrument_index_template.json:/usr/share/elasticsearch/config/instrument_index_template.json
      - ./conductorScripts:/scripts
      - ./health:/health
    environment:
      - PROFILE=${PROFILE:-platform}
    command: >
      sh -c '
        set -e
          echo "Profile is set to: $PROFILE"
          case "$PROFILE" in
            platform)
              echo "Running platform deployment..."
              chmod +x scripts/deployments/platform.sh
              scripts/deployments/platform.sh
              ;;
            *)
              echo "Invalid profile: $PROFILE. Available options are [platform, composition, instrument]."
              exit 1
              ;;
          esac
        exit 0
      '
    healthcheck:
      test: ["CMD", "test", "-f", "/health/conductor_health"]
      interval: 5s
      timeout: 40s
      retries: 100
      start_period: 30s
    networks:
      - conductor-network

  # ==================================================================================
  # File Management (Song, Score, Kafka, Minio)
  # ==================================================================================
 
  # ======================================
  # Kafka 
  # ======================================
  # Messaging system for Song and Maestro, used to orchestrate asynchronous communication, job execution, queuing, and processing.
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/datamanagement/#running-kafka
  # --------------------------------------
  kafka:
      profiles: ["platform"]
      image: confluentinc/cp-kafka:7.6.1
      container_name: kafka
      platform: linux/amd64
      ports:
        - "9092:9092"
        - "29092:29092"
      volumes:
        - ./conductorScripts/services/kafkaSetup.sh:/scripts/kafkaSetup.sh
      environment:
        # Core Kafka Configuration
        KAFKA_PROCESS_ROLES: broker,controller
        KAFKA_NODE_ID: 1
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092
        KAFKA_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://0.0.0.0:29092,CONTROLLER://kafka:9093
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
        KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
        KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
        # Storage Configuration
        KAFKA_LOG_DIRS: /var/lib/kafka/data
        KAFKA_LOG_RETENTION_HOURS: 168  # 7 days
        KAFKA_LOG_RETENTION_BYTES: -1   # Unlimited size
        # Topic Configuration
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_AUTO_CREATE_TOPICS_ENABLE: false
        KAFKA_NUM_PARTITIONS: 1
        KAFKA_DEFAULT_REPLICATION_FACTOR: 1
        KAFKA_MIN_INSYNC_REPLICAS: 1
        # Performance Tuning
        KAFKA_MESSAGE_MAX_BYTES: 5242880  # 5MB max message size
        KAFKA_REPLICA_FETCH_MAX_BYTES: 5242880
        # Logging Configuration
        KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
        KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
        # Cluster Configuration
        CLUSTER_ID: "q1Sh-9_ISia_zwGINzRvyQ" 
      command: >
        sh -c '
          echo "Setting up Kafka..."
          chmod +x /scripts/kafkaSetup.sh
          /scripts/kafkaSetup.sh &
          
          # Start Kafka broker
          /etc/confluent/docker/run
        '
      healthcheck:
        test: 
          - "CMD-SHELL"
          - >
            /bin/kafka-topics --bootstrap-server kafka:9092 --list
        interval: 10s
        timeout: 5s
        retries: 10
      networks:
        - conductor-network

  # ======================================
  # Song Database
  # ======================================
  # Postgres database populated with 30 pre-published analyses (metadata files)
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/datamanagement/#running-song
  # --------------------------------------
  song-db:
    profiles: ["platform"]
    depends_on:
      - conductor
    image: postgres:11.1
    container_name: song-db
    platform: linux/amd64
    ports: 
      - "5433:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: songDb
    volumes:
      - ./persistentStorage/data-song-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d songDb"]
      interval: 20s
      timeout: 10s
      retries: 10
      start_period: 20s
    networks:
      - conductor-network

  # ======================================
  # Song
  # ======================================
  # Metadata management service with a customizable and automated submission validation system
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/datamanagement/#running-song
  # --------------------------------------
  song:
    profiles: ["platform"]
    image: ghcr.io/overture-stack/song-server:5.2.0
    container_name: song
    platform: linux/amd64
    depends_on:
      kafka:
        condition: service_healthy
      song-db:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      # Spring Variables
      SPRING_PROFILES_ACTIVE: prod,secure,kafka
      # Flyway variables
      SPRING_FLYWAY_ENABLED: true
      # Song Variables
      ID_USELOCAL: true
      SCHEMAS_ENFORCELATEST: true
      # Score Variables
      SCORE_URL: http://score:8087
      SCORE_ACCESSTOKEN: 68fb42b4-f1ed-4e8c-beab-3724b99fe528
      # Postgres Variables
      SPRING_DATASOURCE_URL: jdbc:postgresql://song-db:5432/songDb?stringtype=unspecified
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin123
      # Kafka Variables
      SPRING_KAFKA_BOOTSTRAPSERVERS: kafka:9092
      SPRING_KAFKA_TEMPLATE_DEFAULTTOPIC: song-analysis
      # Swagger Variable
      SWAGGER_ALTERNATEURL: /swagger-api
    networks:
      - conductor-network

  # ======================================
  # Minio
  # ======================================
  # High-performance open-source object storage provider 
  # Used here for local object storage found at persistentStorage/data-minio 
  # data-minio contains 60 data files linked to the pre-populated analyses in the song-db. This folder is passed into the image on startup
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/datamanagement/#setting-up-object-storage
  # --------------------------------------
  minio:
    profiles: ["platform"]
    image: minio/minio:RELEASE.2018-05-11T00-29-24Z
    container_name: minio
    platform: linux/amd64
    ports:
      - 9000:9000
    environment:
      MINIO_ACCESS_KEY: admin
      MINIO_SECRET_KEY: admin123
    command: server /data
    volumes:
      - ./persistentStorage/data-minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - conductor-network
   
  # ======================================
  # Score
  # ======================================
  # File transfer microservice
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/datamanagement/#running-score
  # --------------------------------------
  score:
    profiles: ["platform"]
    image: ghcr.io/overture-stack/score-server:5.11.0
    container_name: score
    platform: linux/amd64
    ports:
      - "8087:8087"
    environment:
      # Spring Variables
      SPRING_PROFILES_ACTIVE: s3,collaboratory
      SERVER_PORT: 8087
      # Song Variable
      METADATA_URL: http://song:8080
      # Score Variables
      SERVER_SSL_ENABLED: "false"
      # Object Storage Variables
      S3_ENDPOINT: http://host.docker.internal:9000
      S3_ACCESSKEY: admin
      S3_SECRETKEY: admin123
      S3_SIGV4ENABLED: true
      S3_SECURED: false
      OBJECT_SENTINEL: heliograph
      BUCKET_NAME_OBJECT: object
      BUCKET_NAME_STATE: state
      UPLOAD_PARTSIZE: 1073741824
      UPLOAD_CONNECTION_TIMEOUT: 1200000
    networks:
      - conductor-network

  # ======================================
  # Elasticsearch
  # ======================================
  # Search and analytics engine used to help query massive datasets flexibly and efficiently.
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/dataportal/#setting-up-elasticsearch
  # --------------------------------------
  elasticsearch:
    profiles: ["platform"]
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.1
    container_name: elasticsearch
    platform: linux/amd64
    ports:
      - "9200:9200"
    environment:
      PUID: 3381
      PGID: 100
      discovery.type: single-node
      cluster.name: workflow.elasticsearch
      ES_JAVA_OPTS: -Xms8g -Xmx8g
      ELASTIC_PASSWORD: myelasticpassword
      xpack.security.enabled: "true"
      MANAGE_INDEX_TEMPLATES: "true"
      NETWORK_HOST: http://localhost:9200
      bootstrap.memory_lock: "true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          cpus: '6'
          memory: 16G
        reservations:
          cpus: '2'
          memory: 8G
    volumes:
      - ./persistentStorage/es-volumes/es-data:/usr/share/elasticsearch/data
      - ./persistentStorage/es-volumes/es-logs:/usr/share/elasticsearch/logs
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
    healthcheck:
      test: "curl --silent --fail localhost:9200/_cluster/health?wait_for_status=yellow&timeout=50s || exit 1"
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 25s
    networks:
      - conductor-network

  # ======================================
  # Arranger-Server compositions
  # ======================================
  # Search API generation with compatible search UI components
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/dataportal/#running-arranger
  # --------------------------------------
  arranger-composition:
    profiles: ["platform"]
    image: ghcr.io/overture-stack/arranger-server:3.0.0-beta.36
    container_name: arranger-composition
    platform: linux/amd64
    depends_on:
      conductor:
        condition: service_healthy
    ports:
      - "5050:5050"
    volumes:
     - ./configurationFiles/arrangerConfigs/compositionConfigs/base.json:/app/modules/server/configs/base.json
     - ./configurationFiles/arrangerConfigs/compositionConfigs/extended.json:/app/modules/server/configs/extended.json
     - ./configurationFiles/arrangerConfigs/compositionConfigs/facets.json:/app/modules/server/configs/facets.json
     - ./configurationFiles/arrangerConfigs/compositionConfigs/matchbox.json:/app/modules/server/configs/matchbox.json
     - ./configurationFiles/arrangerConfigs/compositionConfigs/table.json:/app/modules/server/configs/table.json
    environment:
      # Arranger Variables
      PORT: 5050
      ENABLE_LOGS: false
      # Elasticsearch Variables
      ES_HOST: http://elasticsearch:9200
      ES_USER: elastic
      ES_PASS: myelasticpassword
      ES_ARRANGER_SET_INDEX: composition_arranger_set
      DEBUG: true
    networks:
      - conductor-network

  # ======================================
  # Arranger-Server instruments
  # ======================================
  # Search API generation with compatible search UI components
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/dataportal/#running-arranger
  # Check logs on arranger server for manifest columns
  # --------------------------------------
  arranger-instrument:
    profiles: ["platform"]
    image: ghcr.io/overture-stack/arranger-server:3.0.0-beta.36
    container_name: arranger-instrument
    platform: linux/amd64
    depends_on:
      conductor:
        condition: service_healthy
    ports:
      - "5051:5051"
    volumes:
     - ./configurationFiles/arrangerConfigs/instrumentConfigs/base.json:/app/modules/server/configs/base.json
     - ./configurationFiles/arrangerConfigs/instrumentConfigs/extended.json:/app/modules/server/configs/extended.json
     - ./configurationFiles/arrangerConfigs/instrumentConfigs/facets.json:/app/modules/server/configs/facets.json
     - ./configurationFiles/arrangerConfigs/instrumentConfigs/matchbox.json:/app/modules/server/configs/matchbox.json
     - ./configurationFiles/arrangerConfigs/instrumentConfigs/table.json:/app/modules/server/configs/table.json
    environment:
      # Arranger Variables
      PORT: 5051
      ENABLE_LOGS: false
      # Elasticsearch Variables
      ES_HOST: http://elasticsearch:9200
      ES_USER: elastic
      ES_PASS: myelasticpassword
      ES_ARRANGER_SET_INDEX: instrument_arranger_set
      DEBUG: true
    networks:
      - conductor-network

  # ======================================
  # Stage run this locally
  # ======================================
  # The react-based, front end portal UI for Overture
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/dataportal/#setting-up-stage
  # --------------------------------------
  multi-stage:
    profiles: ["platform"]
    image: multi-stage:3.0
    container_name: multi-stage
    pull_policy: never
    platform: linux/arm64/v8
    depends_on:
      conductor:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      # Stage Variables
      NEXTAUTH_URL: http://localhost:3000/api/auth
      NEXT_PUBLIC_LAB_NAME: Prelude Portal
      NEXT_PUBLIC_ADMIN_EMAIL: example@example.com
      NEXT_PUBLIC_DEBUG: true
      NEXT_PUBLIC_SHOW_MOBILE_WARNING: true
      NEXT_PUBLIC_ENABLE_DOWNLOADS: true
      # Composition Arranger Variables
      NEXT_PUBLIC_ARRANGER_COMPOSITION_API: http://localhost:5050/graphql # Updated inline with nginx reverse proxy
      NEXT_PUBLIC_ARRANGER_COMPOSITION_DOCUMENT_TYPE: file
      NEXT_PUBLIC_ARRANGER_COMPOSITION_INDEX: composition_centric
      # Instrument Arranger Variables
      NEXT_PUBLIC_ARRANGER_INSTRUMENT_API: http://localhost:5051/graphql # Updated inline with nginx reverse proxy
      NEXT_PUBLIC_ARRANGER_INSTRUMENT_DOCUMENT_TYPE: file
      NEXT_PUBLIC_ARRANGER_INSTRUMENT_INDEX: instrument_centric
    networks:
      - conductor-network

volumes:
  elasticsearch-data:
    driver: local
    driver_opts:
      device: ./persistentStorage/es-volumes/es-data
      o: bind
      type: none
  elasticsearch-logs:
    driver: local
    driver_opts:
      device: ./persistentStorage/es-volumes/es-logs
      o: bind
      type: none

networks:
  conductor-network:
    driver: bridge